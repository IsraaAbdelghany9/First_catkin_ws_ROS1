// Generated by gencpp from file mte411_services/VoltageToTempResponse.msg
// DO NOT EDIT!


#ifndef MTE411_SERVICES_MESSAGE_VOLTAGETOTEMPRESPONSE_H
#define MTE411_SERVICES_MESSAGE_VOLTAGETOTEMPRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32.h>

namespace mte411_services
{
template <class ContainerAllocator>
struct VoltageToTempResponse_
{
  typedef VoltageToTempResponse_<ContainerAllocator> Type;

  VoltageToTempResponse_()
    : temperature()  {
    }
  VoltageToTempResponse_(const ContainerAllocator& _alloc)
    : temperature(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32_<ContainerAllocator>  _temperature_type;
  _temperature_type temperature;





  typedef boost::shared_ptr< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VoltageToTempResponse_

typedef ::mte411_services::VoltageToTempResponse_<std::allocator<void> > VoltageToTempResponse;

typedef boost::shared_ptr< ::mte411_services::VoltageToTempResponse > VoltageToTempResponsePtr;
typedef boost::shared_ptr< ::mte411_services::VoltageToTempResponse const> VoltageToTempResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mte411_services::VoltageToTempResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mte411_services::VoltageToTempResponse_<ContainerAllocator1> & lhs, const ::mte411_services::VoltageToTempResponse_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mte411_services::VoltageToTempResponse_<ContainerAllocator1> & lhs, const ::mte411_services::VoltageToTempResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mte411_services

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef84ef3026ebaa21b37f5b167de3d809";
  }

  static const char* value(const ::mte411_services::VoltageToTempResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef84ef3026ebaa21ULL;
  static const uint64_t static_value2 = 0xb37f5b167de3d809ULL;
};

template<class ContainerAllocator>
struct DataType< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mte411_services/VoltageToTempResponse";
  }

  static const char* value(const ::mte411_services::VoltageToTempResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32 temperature \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::mte411_services::VoltageToTempResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VoltageToTempResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mte411_services::VoltageToTempResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mte411_services::VoltageToTempResponse_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    s << std::endl;
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.temperature);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MTE411_SERVICES_MESSAGE_VOLTAGETOTEMPRESPONSE_H
